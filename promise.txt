### **🔹 How to Create a JavaScript Promise?**  
A **Promise** in JavaScript is used to handle **asynchronous operations** like API calls, file reading, or database queries.  

A Promise has three states:  
1. **Pending** → Initial state  
2. **Resolved (Fulfilled)** → Operation successful  
3. **Rejected** → Operation failed  

---

### **🔹 Creating a Promise**
A Promise is created using the `new Promise()` constructor.  
It takes a function with **two parameters: `resolve` and `reject`**.

```js
const myPromise = new Promise((resolve, reject) => {
    let success = true;  // Change to false to test rejection

    setTimeout(() => {
        if (success) {
            resolve("✅ Operation Successful!");
        } else {
            reject("❌ Operation Failed!");
        }
    }, 2000); // Simulates a delay of 2 seconds
});
```
---

### **🔹 Handling the Promise**
You can handle a Promise using `.then()`, `.catch()`, and `.finally()`.

```js
myPromise
    .then((result) => {
        console.log(result);  // If resolved
    })
    .catch((error) => {
        console.log(error);  // If rejected
    })
    .finally(() => {
        console.log("🔄 Promise completed!");
    });
```
---

### **🔹 Creating a Function That Returns a Promise**
```js
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let data = { user: "John Doe", age: 25 };

            if (data) {
                resolve(data);
            } else {
                reject("❌ No Data Found!");
            }
        }, 1500);
    });
}

fetchData()
    .then((data) => console.log("User Data:", data))
    .catch((error) => console.log(error));
```
---

### **🔹 Using `async/await` with Promises**
Instead of `.then()` and `.catch()`, you can use `async/await`.

```js
async function getUser() {
    try {
        let user = await fetchData();
        console.log("User:", user);
    } catch (error) {
        console.log(error);
    }
}

getUser();
```
✅ **More readable and recommended for modern JavaScript!**

---

### **🔹 Summary**
- **A Promise** represents a future value (success or failure).  
- **`resolve(value)`** → Success, returns a value.  
- **`reject(error)`** → Failure, returns an error.  
- **`.then()`** → Runs when resolved.  
- **`.catch()`** → Runs when rejected.  
- **`.finally()`** → Runs after `.then()` or `.catch()`.  
- **Use `async/await`** to handle Promises in a clean way.  

Do you want a real-world **example using API calls** with Promises? 🚀